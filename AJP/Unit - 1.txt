Genesis of Java:
----------------

    Who created? James Gosling at Sun Micro-systems in 1991.

    First name: Oak → later changed to Java (name from coffee).

    Main goals:

        Easy to learn

        Object-Oriented

        Secure

        Works on any platform (Write Once, Run Anywhere)

        Strong and reliable

Types of Java Applications:
--------------------------

    Standalone Applications – Run on your computer.
    Example: Calculator, Media Player.

    Web Applications – Run on a server and open in a browser.
    Example: Online Banking, Amazon.

    Enterprise Applications – Big company systems.
    Example: ERP(Enterprise Resource Planning), CRM(Customer Relationship Management).

    Mobile Applications – Apps for mobile phones.
    Example: Whats App, Instagram.

    Scientific Applications – For research and calculations.
    Example: MATLAB back-end.

    Embedded Applications – For small devices.
    Example: Smart cards, Set-top boxes.
    
Java Data Types:
-----------------
	java is strongly types, meaning you must declare a variable's type before using it.

Primitive Data types
--------------------
| Data Type   | Size (bits) | Range                                                   |
| ----------- | -----------  -------------------------------------------------------  |
| **byte**    | 8           | -128 to 127                                             |
| **short**   | 16          | -32,768 to 32,767                                       |
| **int**     | 32          | -2,147,483,648 to 2,147,483,647                         |
| **long**    | 64          | -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 |
| **float**   | 32          | 3.4e−038 to 3.4e+038 (approx.)                          |
| **double**  | 64          | 1.7e−308 to 1.7e+308 (approx.)                          |
| **char**    | 16          | 0 to 65,535 (Unicode characters)                        |
| **boolean** | 1 (logical) |  true or false                                          |
------------------------------------------------------------------------------------------

Non-Primitive Data Types:
-------------------------
String
Arrays
Class, Objects, Interfaces

Variables in Java:
-----------------

types variableName = value; //Declaration + Initialization

Types of Variables in Java:
---------------------------

1. Local Variables - Declared inside methods, constructors, or clocks.
2. instance Variables - Declared in a class but outside methods(each object gets its own copy).
3. Static variables - Declared with Static, shared among all objects.

Example:
---------

class Example{
static int static_Var=100; //static variable
int instance_Var = 10;

public void method(){
int local_Var = 10;  //local variable
System.out.print(Local_Var);

}

}

Arrays in Java:
---------------
	An array stores multiple values of the same type in a single variable.
	
	Declaration:
		int[] number; // preferred
		int numbers[]; //also valid
	initialization:
		int[] numbers = {10,20,30}; //direct initialization
		int[] values = new int[5];  //default values = 0
		values [0] = 100;           // assigning value
	Accessing Elements:
		System.out.print(number[0]); // first element

Example Program:
-------------------
public class Main {
    public static void main(String[] args) {
        // Variables
        int age = 22;
        String name = "Yuvan";

        // Array
        int[] marks = {85, 90, 78};

        // Output
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("First Mark: " + marks[0]);
    }
}

Output:
-------
Name: Yuvan
Age: 22
First Mark: 85

Operators in Java:
--------------------
 	In Java, operators are special symbols that perform specific operations on variables and values.
 	
1. Arithmetric Operators:
	Used for basic mathematical operations.
-------------------------------------------------------------------
| Operator | Description         | Example (`a=10, b=5`) | Result |
| -------- | ------------------- | --------------------- | ------ |
| `+`      | Addition            | `a + b`               | 15     |
| `-`      | Subtraction         | `a - b`               | 5      |
| `*`      | Multiplication      | `a * b`               | 50     |
| `/`      | Division            | `a / b`               | 2      |
| `%`      | Modulus (remainder) | `a % b`               | 0      |
--------------------------------------------------------------------

2. Relational Operators:
	Used to compare tow values(returns true of false).
------------------------------------------------------------------------
| Operator | Description              | Example (`a=10, b=5`) | Result |
| -------- | ------------------------ | --------------------- | ------ |
| `==`     | Equal to                 | `a == b`              | false  |
| `!=`     | Not equal to             | `a != b`              | true   |
| `>`      | Greater than             | `a > b`               | true   |
| `<`      | Less than                | `a < b`               | false  |
| `>=`     | Greater than or equal to | `a >= b`              | true   |
| `<=`     | Less than or equal to    | `a <= b`              | false  |
-------------------------------------------------------------------------

3. Logical Operators:
	Used to compare tow values (returns true or false).
-----------------------------------------------------------------
| Operator | Description | Example (`a=10, b=5, c=20`) | Result |
| -------- | ----------- | --------------------------- | ------ |
| `&&`     | Logical AND | `(a > b) && (a < c)`        | true   |
| `\|\|`   | Logical OR  | `(a > b) \|\| (a > c)`      | true   |
| `!`      | Logical NOT | `!(a > b)`                  | false  |
------------------------------------------------------------------

4. Assignment Operators:
	Used to assign values to variables.

-------------------------------------------------
| Operator | Example (`a=10`) | Meaning       |
| -------- | ---------------- | ------------- |
| `=`      | `a = 5`          | Assign 5 to a |
| `+=`     | `a += 5`         | `a = a + 5`   |
| `-=`     | `a -= 5`         | `a = a - 5`   |
| `*=`     | `a *= 5`         | `a = a * 5`   |
| `/=`     | `a /= 5`         | `a = a / 5`   |
| `%=`     | `a %= 5`         | `a = a % 5`   |
-------------------------------------------------

5. Unary Operators
	Operate on a single operand.
----------------------------------------------------------------
| Operator | Description   | Example (`a=10`) | Result       |
| -------- | ------------- | ---------------- | ------------ |
| `+`      | Positive sign | `+a`             | 10           |
| `-`      | Negative sign | `-a`             | -10          |
| `++`     | Increment     | `++a` (pre)      | 11           |
|          |               | `a++` (post)     | 10 (then 11) |
| `--`     | Decrement     | `--a` (pre)      | 9            |
|          |               | `a--` (post)     | 10 (then 9)  |
| `!`      | Logical NOT   | `!(a > 5)`       | false        |
---------------------------------------------------------------

6. Bitwise Operators:
	Work at the binary(bit) level.
----------------------------------------------------------------------
| Operator | Description          | Example (`a=5, b=3`)    | Result |
| -------- | -------------------- | ----------------------- | ------ |
| `&`      | Bitwise AND          | `a & b` (0101 & 0011)   | 1      |
| `\|`     | Bitwise OR           | `a \| b` (0101 \| 0011) | 7      |
| `^`      | Bitwise XOR          | `a ^ b`                 | 6      |
| `~`      | Bitwise NOT          | `~a`                    | -6     |
| `<<`     | Left shift           | `a << 1`                | 10     |
| `>>`     | Right shift          | `a >> 1`                | 2      |
| `>>>`    | Unsigned right shift | `a >>> 1`               | 2      |
----------------------------------------------------------------------

7. Ternary Operator:
	A short form of if-else.
String result = (a > b) ? "A is big" : "B is big";

8. Instance of Operator:

if (obj instanceof String) {
    System.out.println("It's a String");
}

Utility Classes:
-----------------

	1. Usually declared as final(so they cannot be subclassed).
	2. Have private constructor(to prevent object creation).
	3. Contain only static methods and constants.
	4. Provide reusable helper functions.

Common Utility Classes in java
---------------------------------

1. java.lang.Math
-> provides mathematical functions.
int x = Math.max(10, 20);    // returns 20
double y = Math.sqrt(25);    // returns 5.0
double z = Math.pow(2, 3);   // returns 8.0

2.java.util.Arrays
Provides methods for array manipulation.
int[] arr = {3, 1, 4, 2};
Arrays.sort(arr);  
System.out.println(Arrays.toString(arr)); // [1, 2, 3, 4]

3.java.util.Collections
Provides methods for collection objects like List, Set.
List<Integer> list = Arrays.asList(5, 3, 8, 1);
Collections.sort(list);
System.out.println(list); // [1, 3, 5, 8]

4.java.util.Objects
Provides utility methods for working with objects.
String str = null;
System.out.println(Objects.isNull(str));  // true
System.out.println(Objects.requireNonNull("Java")); // Java

5.java.util.UUID
-> Generates universally unique identifiers.
String uniqueID = UUID.randomUUID().toString();
System.out.println(uniqueID);

6.java.util.concurrent.TimeUnit
used for time conversions.
long minutes = TimeUnit.HOURS.toMinutes(2); // 120

7.java.util.Random
Generates random numbers.
Random rand = new Random();
int num = rand.nextInt(100);  // Random number between 0 and 99

Example: custom Utility Class

You can also create your own utility class:
final class StringUtils {
    // Private constructor to prevent instantiation
    private StringUtils() {}

    public static boolean isNullOrEmpty(String str) {
        return str == null || str.isEmpty();
    }
}

public class Main {
    public static void main(String[] args) {
        System.out.println(StringUtils.isNullOrEmpty(""));   // true
        System.out.println(StringUtils.isNullOrEmpty("Java")); // false
    }
}
✅ In short: Utility classes in Java are helper classes with static methods that simplify common programming tasks (Math, Arrays, Collections, etc.).

